@{
    ViewBag.Title = "配方建立／修改";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section css{
    <link rel="stylesheet" href="@Url.Content("~/Scripts/base/easyui/themes/bootstrap/easyui.css")" />
    <link rel="stylesheet" href="@Url.Content("~/Scripts/base/easyui/themes/icon.css")" />
}

<h2>機台參數建立／修改</h2>

<div style="margin-bottom:10px; display: flex; flex-direction:column">
    <div style="display: flex; align-items:center">
        <label for="recipeMachine" style="width:60px;display:inline-block;margin-left:20px">機台：</label>
        <input name="recipeMachine" id="recipeMachine" class="easyui-combobox" style="width:120px" />

        <label for="recipeMachine" style="width:60px;display:inline-block;margin-left:20px">料號：</label>
        @*<input id="prodNo" class="easyui-combobox" style="width:120px" />*@
        <input id="prodNo" class="easyui-textbox" style="width:120px" />
        <label style="width:60px;display:inline-block;margin-left:20px">模具：</label>
        @*<input id="moldNo" class="easyui-combobox" style="width:120px" />*@
        <input id="moldNo" class="easyui-textbox" style="width:120px" />
        <label style="width:60px;display:inline-block;margin-left:20px">原料：</label>
        @*<input id="materialNo" class="easyui-combobox" style="width:120px" />*@
        <input id="materialNo" class="easyui-textbox" style="width:120px" />
        <div href="javascript:void(0)" class="custom-easyui-button" onclick="startBuild()">搜尋</div>

    </div>
    <div style="display:flex">
        <!-- 新增版本下拉與註解顯示 -->
        <label style="width:60px;display:inline-block;margin-left:20px">版本：</label>
        <input id="versionNo" class="easyui-combobox" style="width:120px"
               data-options="
                 valueField:'RecipeId',
                 textField:'Version',
                 editable:false,
                 panelHeight:'auto',
                 onSelect: onVersionSelect
               " />
        <!-- 在「版本下拉」旁，改成一個易於編輯的 textbox -->
        <label style="width:60px;display:inline-block;margin-left:20px">備註：</label>
        <input id="versionRemark" class="easyui-textbox" style="width:300px;"
               data-options="multiline:true,panelHeight:'auto'" />

        <!-- 如果你還想顯示「更新者 / 更新時間」-->
        <span id="versionInfo" style="margin-left:10px;color:#555"></span>
    </div>
</div>

<table id="paramGrid" class="easyui-datagrid" style="width:100%"
       data-options="singleSelect:true,fitColumns:true,nowrap:false,autoRowHeight:true">
    <thead>
        <tr>
            <th data-options="field:'ParamName',title:'參數',width:250">參數</th>
            <th data-options="field:'MaxValue',title:'上限值',width:100,editor:{type:'textbox'}">上限值</th>
            <th data-options="field:'StdValue',title:'標準值',width:100,editor:{type:'textbox'}">標準值</th>
            <th data-options="field:'MinValue',title:'下限值',width:100,editor:{type:'textbox'}">下限值</th>
            <th data-options="field:'BiasMethod',title:'偏差方式',width:120,editor:{type:'combobox'}">偏差方式</th>
            <th data-options="field:'BiasValue',title:'偏差值',width:100,editor:{type:'numberbox',options:{precision:2}}">偏差值</th>
            <th data-options="field:'AlarmFlag',title:'啟用警報',width:100,
                                formatter:function(v){ return v === 'Y' ? '✅' : '❌'; },
                                editor:{type:'checkbox',options:{on:'Y',off:'N'}}">啟用警報</th>
        </tr>
    </thead>
</table>

<div style="margin-top:10px; display:flex; justify-content:end">
    <div href="javascript:void(0)" class="custom-easyui-button" onclick="saveRecipe('save')">修改</div>
    <div href="javascript:void(0)" class="custom-easyui-button" onclick="saveRecipe('newVersion')">另存新版本</div>
</div>

@section Scripts {
    <script src="~/Scripts/base/easyui/jquery.easyui.min.js"></script>
    <script>
        let lastEditIndex = null;
        let currentRecipeId = 0;
        let allVersions = [];

        const biasMethod = [
            { value: 'customize', text: '自定義' },
            { value: 'plusminus', text: '正負加減值' },
            { value: 'percent', text: '正負加減%數' }
        ]

        $(function () {
            // 1. 拿機台清單
            $.get('@Url.Action("GetMachineList","MachineManage")', res => {
              if (!res.success) {
                return $.messager.alert('錯誤', '無法取得機台清單');
              }

              // 2. 初始化 Combobox
              $('#recipeMachine').combobox({
                data: res.data,             // 確定是 [{ DeviceId, DeviceName }, ...]
                valueField: 'DeviceID',     // 值用 DeviceId
                textField: 'DeviceName',    // 顯示用 DeviceName
                panelHeight: 'auto',
                filter: function (q, row) { return row.DeviceName.indexOf(q) >= 0; },
                //onSelect: rec => loadParamGrid(rec.DeviceID)
              });
            });


            let editing = { index: null, field: null };

            $('#paramGrid').datagrid({
                columns: [[
                    { field: 'ParamName', title: '參數', width: 250 },
                    { field: 'StdValue', title: '標準值', width: 100, editor: { type: 'textbox' } },
                    { field: 'MaxValue', title: '上限值', width: 100, editor: { type: 'textbox' } },
                    { field: 'MinValue', title: '下限值', width: 100, editor: { type: 'textbox' } },
                    {
                        field: 'BiasMethod', title: '偏差方式', width: 120,
                        formatter: function (value) {
                            const m = biasMethod.find(x => x.value === value);
                            return m ? m.text : value;
                        },
                        editor: {
                            type: 'combobox',
                            options: {
                                data: biasMethod,
                                valueField: 'value',
                                textField: 'text',
                                editable: false,
                                panelHeight: 'auto'
                            }
                        }
                    },
                    {
                        field: 'BiasValue', title: '偏差值', width: 100,
                        editor: { type: 'numberbox', options: { precision: 2 } }
                    },
                    {
                        field: 'AlarmFlag', title: '啟用警報', width: 100,
                        formatter: function (v) {
                            return v === 'Y' ? '✅' : '❌';
                        },
                        editor: {
                            type: 'checkbox',
                            options: { on: 'Y', off: 'N' }
                        }
                    }
                ]],
                onClickCell(i, field) {
                    const dg = $(this);
                    if (editing.index === i && editing.field === field) {
                        dg.datagrid('endEdit', i);
                    } else {
                        if (editing.index !== null) dg.datagrid('endEdit', editing.index);
                        dg.datagrid('beginEdit', i);
                        editing = { index: i, field };
                    }
                },
                onEndEdit(index, row, changes) {
                    // 只有偏差值或方式變更，才算一次新的上下限
                    console.log("row",row, "chang", changes)
                    if ('BiasValue' in changes || 'BiasMethod' in changes) {
                        const orig = parseFloat(row.StdValue) || 0;
                        const bias = parseFloat(row.BiasValue) || 0;
                        let max = orig, min = orig;
                        if (row.BiasMethod === 'plusminus') {
                            max = orig + bias; min = orig - bias;
                        } else if (row.BiasMethod === 'percent') {
                            max = orig * (1 + bias / 100);
                            min = orig * (1 - bias / 100);
                        }

                        if (row.BiasMethod === 'plusminus' || row.BiasMethod === 'percent') {
                            $('#paramGrid').datagrid('updateRow', {
                                index,
                                row: {
                                    MaxValue: max.toFixed(2),
                                    MinValue: min.toFixed(2)
                                }
                            });
                            // 同步更新 row 物件
                            row.MaxValue = max.toFixed(2);
                            row.MinValue = min.toFixed(2);
                        }
                    }
                    // 清掉正在編輯的記錄
                    editing = { index: null, field: null };
                }
            });

        });

      // 根據機台載入參數定義
        function loadParamGrid(deviceId, prodNo, materialNo, moldNo) {
            console.log("loadPramGrid", deviceId, { prodNo }, { materialNo }, {moldNo})
            lastEditIndex = null;
            $.get('@Url.Action("GetDetailToEdit", "RecipeManage")', { deviceId, prodNo, materialNo, moldNo }, res => {
                if (!res.success) return $.messager.alert('錯誤', res.message || '無法讀取參數');

                allVersions = res.data;

                if (!allVersions || allVersions.length === 0) {
                    alert("該選擇找不到既有參數列表，開始新建參數")
                    // 清空版本下拉
                    $('#versionNo').combobox('loadData', []);
                    // 清空備註
                    $('#versionRemark').textbox('clear');
                    // 清空更新資訊
                    $('#versionInfo').text('');
                    // 清空模具/原料，預設 NA
                    //$('#moldNo').combobox('setValue', '');
                    //$('#materialNo').combobox('setValue', '');
                    $('#moldNo').textbox('setValue', "");
                    $('#materialNo').textbox('setValue', "");
                    // 清空參數 grid
                    $('#paramGrid').datagrid('loadData', []);
                    // 目前 recipeId 設為 0（新建）
                    currentRecipeId = 0;
                    return;
                }

                // 載入版本下拉 $('#prodNo').textbox('setValue', prodVal);
                $('#versionNo').combobox('loadData', allVersions);
                // 預設選第一個（最新版）
                const first = allVersions[0];

                $('#versionNo').combobox('select', first?.RecipeId);

                const prodVal = first.ProdNo && first.ProdNo.trim()
                    ? first.ProdNo.trim()
                    : '';
                $('#prodNo').textbox('setValue', prodVal);

                const moldVal = first.MoldNo && first.MoldNo.trim()
                    ? first.MoldNo.trim() : '';
                $('#moldNo').textbox('setValue', moldVal);

                const matVal = first.MaterialNo && first.MaterialNo.trim()
                    ? first.MaterialNo.trim() : '';
                $('#materialNo').textbox('setValue', matVal);

                //const remarkVal = first.Remark && first.Remark.trim()
                //    ? first.Remark.trim()
                //    : '';
                //$('#versionRemark').textbox('setValue', remarkVal);


                //// 2. 更新者/更新時間顯示
                //const user = first.UpdateBy || first.CreateBy || '-';
                //const rawDate = first.UpdateDate || first.CreateDate;

                //// 把 .NET JSON 時間字串轉成 JS Date
                //let dateStr = '';
                //if (rawDate) {
                //    // rawDate 可能是 "/Date(1234567890)/" 或 ISO 字串
                //    const msMatch = /\/Date\((\d+)\)\//.exec(rawDate);
                //    const timeMs = msMatch
                //        ? parseInt(msMatch[1], 10)
                //        : Date.parse(rawDate);
                //    if (!isNaN(timeMs)) {
                //        dateStr = new Date(timeMs).toLocaleString();
                //    }
                //}

                //// 最終顯示
                //const info = `最後更新人: ${user} ${dateStr}`;
                //$('#versionInfo').text(info);


                // 3. 記錄目前 RecipeId
                currentRecipeId = first.RecipeId;
                showVersionDetail(first);

            });
        }

        function startBuild() {
            const deviceId = $('#recipeMachine').combobox('getValue');
            if (!deviceId) {
                return $.messager.alert('提示', '機台為必選，請先選擇機台');
            }
            console.log({ deviceId })
            const prodNo = $('#prodNo').textbox('getValue');
            const materialNo = $('#materialNo').textbox('getValue');
            const moldNo = $('#moldNo').textbox('getValue');

            // 呼叫既有的載入參數
            loadParamGrid(deviceId, prodNo, materialNo, moldNo);
        }

          // 儲存按鈕
        function saveRecipe(mode) {

        // 1. 結束正在編輯的格子
        if (lastEditIndex != null) {
            $('#paramGrid').datagrid('endEdit', lastEditIndex);
            lastEditIndex = null;
            }

            $('#paramGrid').datagrid('getRows').forEach((_, idx) => {
                $('#paramGrid').datagrid('endEdit', idx);
            });

        // 收參數值
            const paramRows = $('#paramGrid').datagrid('getRows').map(r => ({
            ParamId: r.ParamId,
            ParamName: r.ParamName,
            StdValue: r.StdValue,
            MaxValue: r.MaxValue,
            MinValue: r.MinValue,
            BiasMethod: r.BiasMethod,
            BiasValue: r.BiasValue,
            AlarmFlag: r.AlarmFlag// 預設值 Y    AlarmFlag: r.AlarmFlag || 'Y' // 預設值 Y
        }));
            console.log("paramRows", paramRows)
        // 3. 收頂端欄位（注意：名稱要跟後端 DTO 一樣）
            const dto = {
            Mode: mode,
            RecipeId : currentRecipeId,

            ProdNo: $('#prodNo').textbox('getValue'),
            MaterialNo: $('#materialNo').textbox('getValue'),
            MoldNo: $('#moldNo').textbox('getValue'),
            DeviceId: $('#recipeMachine').combobox('getValue'),// 機台（必填）
            Remark: $('#versionRemark').textbox('getValue'),   // ← 這裡拿值
            RecipeDetails: paramRows
        };
        console.log(dto)
        // 4. 前端簡易驗證
            if (!dto.ProdNo || !dto.DeviceId) {
            return $.messager.alert('提示', '請先選擇「料號」與「機台」');
        }


        // 傳到後端
        $.ajax({
            url: '@Url.Action("SaveRecipe","RecipeManage")',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(dto),
            success: res => {
                if (res.success) {
                    $.messager.alert('成功','儲存完成');
                } else {
                    $.messager.alert('錯誤', res.message || '儲存失敗');
                }
                },
                error: () => $.messager.alert('錯誤','儲存時發生錯誤')
            });
        }

        function showVersionRemark(ver) {
            // 1. 如果 Remark 有值，就 setValue；否則 clear()

        }

        // 把 Param 陣列渲染到 DataGrid
        function onVersionSelect(rec) {
            const ver = allVersions.find(v => v.RecipeId === rec.RecipeId);
            showVersionDetail(ver);
        }

        // 把 Param 陣列渲染到 DataGrid
        function showVersionDetail(ver) {

            console.log("showVersionDetail", ver)

            //const txt = `更新:${ver.UpdateBy || ''}`
            //    + ` ${ver.UpdateDate ? new Date(ver.UpdateDate).toLocaleString() : ''}`;
            //$('#versionRemark').textbox('setValue', txt);


            const remarkVal = ver.Remark && ver.Remark.trim()
                ? ver.Remark.trim()
                : '';
            $('#versionRemark').textbox('setValue', remarkVal);

            // 2. 更新者/更新時間顯示
            const user = ver.UpdateBy || ver.CreateBy || '-';
            const rawDate = ver.UpdateDate || ver.CreateDate;

            // 把 .NET JSON 時間字串轉成 JS Date
            let dateStr = '';
            if (rawDate) {
                // rawDate 可能是 "/Date(1234567890)/" 或 ISO 字串
                const msMatch = /\/Date\((\d+)\)\//.exec(rawDate);
                const timeMs = msMatch
                    ? parseInt(msMatch[1], 10)
                    : Date.parse(rawDate);
                if (!isNaN(timeMs)) {
                    dateStr = new Date(timeMs).toLocaleString();
                }
            }

            // 最終顯示
            const info = `最後更新人: ${user} ${dateStr}`;
            $('#versionInfo').text(info);

            currentRecipeId = ver.RecipeId;

            params = ver.Params
            const rows = params.map(d => ({
                ParamId: d.ParamId,
                ParamName: d.ParamName,
                StdValue: d.StdValue || '',
                MaxValue: d.MaxValue || '',
                MinValue: d.MinValue || '',
                BiasMethod: d.BiasMethod || 'customize',
                BiasValue: d.BiasValue || '',
                AlarmFlag: d.AlarmFlag || 'Y' 
            }));
            $('#paramGrid').datagrid('loadData', rows);

        }


    </script>

}