@{
    ViewBag.Title = "機台參數統一管理";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h5>機台參數統一管理</h5>

<div style="display: flex; height: calc(100vh - 200px); gap: 10px; min-height: 425px;">
    <!-- 左側：過濾器與清單 -->
    <div style="min-width: 450px; width: 40%; display: flex; flex-direction: column;">
        <!-- 過濾區域 -->
        <div style="margin-bottom: 10px; padding: 10px; background: #f5f5f5; border: 1px solid #ddd; border-radius: 5px;">
            <div style="display: flex; gap: 5px; align-items: center; margin-bottom: 8px;">
                <label style="width: 50px; display: inline-block; font-weight: bold;">機台：</label>
                <input id="filterMachine" class="easyui-combobox" style="width:180px"
                       data-options="
                         valueField:'DeviceID',
                         textField:'DeviceName',
                         panelHeight:'300',
                         prompt:'請選擇機台',
                         onSelect:onMachineSelect,
                         onChange:onMachineChange
                       " />
            </div>
            <div style="display:flex; gap:10px">
                <div style="display: flex; gap: 5px; align-items: center; margin-bottom: 8px;">
                    <label style="width: 50px; display: inline-block; font-weight: bold;">料號：</label>
                    <input id="filterProdNo" class="easyui-combobox" style="width:150px"
                           data-options="
                         valueField:'ProdNo',
                         textField:'ProdNo',
                         panelHeight:'300',
                         prompt:'請先選擇機台',
                         disabled:true,
                         onSelect:onProdNoSelect,
                         onChange:onProdNoChange
                       " />
                </div>
                <div style="display: flex; gap: 5px; align-items: center; margin-bottom: 8px;">
                    <label style="width: 50px; display: inline-block; font-weight: bold;">模具：</label>
                    <input id="filterMoldNo" class="easyui-combobox" style="width:150px"
                           data-options="
                         valueField:'MoldNo',
                         textField:'MoldNo',
                         panelHeight:'300',
                         prompt:'請先選擇料號',
                         disabled:true,
                         onSelect:onMoldNoSelect
                       " />
                </div>
            </div>
            <div style="display:flex; justify-content:space-between; align-items:center">
                <div style="display: flex; gap: 10px; align-items: baseline;">
                    <div href="javascript:void(0)" class="custom-easyui-button" onclick="applyFilters()">搜尋</div>
                    <div href="javascript:void(0)" class="custom-easyui-button" onclick="clearFilters()">清除</div>
                    <div href="javascript:void(0)" class="custom-easyui-button" onclick="createNewRecipe()">新增</div>

                </div>
                <div style="display: flex; gap: 10px; align-items: baseline;">
                    <input type="checkbox" id="showAllVersions" onchange="onShowAllVersionsChange()" />
                    <label for="showAllVersions" style="font-weight: bold; cursor: pointer;">顯示全版本</label>
                </div>
            </div>
        </div>

        <!-- Recipe 清單 -->
        <div style="flex: 1; min-height: 0; display: flex; flex-direction: column;">
            <table id="recipeGrid" class="easyui-datagrid" style="width:100%; height: 100%;"
                   data-options="
                 url:'@Url.Action("GetRecipes", "RecipeManage")',
                 method:'get',
                 singleSelect:true,
                 fitColumns:true,
                 rownumbers:true,
                 pagination:true,
                 panelHeight:500,
                 pageSize:50,
                 onSelect:onRecipeSelect,
                 onLoadSuccess:onRecipeGridLoad,
                 scrollbarSize:8
               ">
                <thead>
                    <tr>
                        <th data-options="field:'RecipeId',hidden:true">ID</th>
                        <th data-options="field:'DeviceName',title:'機台',width:100">機台</th>
                        <th data-options="field:'ProdNo',title:'料號',width:90">料號</th>
                        <th data-options="field:'MoldNo',title:'模具',width:60">模具</th>
                        <th data-options="field:'Version',title:'版次',width:30,align:'center'">版次</th>
                        <th data-options="field:'IsActive',title:'啟用',width:30,align:'center',formatter:formatActive">啟用</th>
                    </tr>
                </thead>
            </table>
        </div>
    </div>

    <!-- 右側：詳細編輯區 -->
    <div style="width: 60%; display: flex; flex-direction: column; min-height: 0;">
        <!-- 空白狀態 -->
        <div id="emptyState" style="text-align: center; color: #666; padding: 80px 20px; background: #fafafa; border: 1px dashed #ddd; border-radius: 5px; height: 100%; display: flex; flex-direction: column; justify-content: center; align-items: center;">
            <h3 style="color: #999; margin-bottom: 10px;">請從左側選擇一個參數配置</h3>
            <p>選擇現有配置進行查看或編輯<br />或點擊「新增」建立新的參數配置</p>
        </div>

        <!-- 編輯面板 -->
        <div id="editPanel" style="display: none; height: 100%; flex-direction: column;">
            <!-- 基本資訊顯示區 -->
            <div style="background: #f0f0f0; padding: 15px; margin-bottom: 15px; border: 1px solid #ccc; border-radius: 5px; flex-shrink: 0;">
                <div style="display: flex; gap: 20px; align-items: center; margin-bottom: 10px;">
                    <div style="display: flex; align-items: baseline; gap: 5px;">
                        <label style="font-weight: bold; color: #333;">機台：</label>
                        <span id="displayDeviceName" style="font-weight: bold;">-</span>
                    </div>
                    <div style="display: flex; align-items: baseline; gap: 5px;">
                        <label style="font-weight: bold; color: #333;">料號：</label>
                        <span id="displayProdNo" style="font-weight: bold; ">-</span>
                    </div>
                    <div style="display: flex; align-items: baseline; gap: 5px;">
                        <label style="font-weight: bold; color: #333;">模具：</label>
                        <span id="displayMoldNo" style="font-weight: bold; ">-</span>
                    </div>
                </div>
                <div style="display: flex; gap: 20px; align-items: center; margin-bottom: 10px;">
                    <!-- 版本下拉選擇 -->
                    <div style="display: flex; align-items: baseline; gap: 5px;">
                        <label style="font-weight: bold; color: #333;">版本：</label>
                        <input id="versionSelect" class="easyui-combobox" style="width:120px;"
                               data-options="
                                 valueField:'RecipeId',
                                 textField:'VersionDisplay',
                                 panelHeight:'auto',
                                 editable:false,
                                 onSelect:onVersionSelect
                               " />
                    </div>
                    <div style="display: flex; align-items: baseline; gap: 5px; flex: 1;">
                        <label style="font-weight: bold; color: #333;">備註：</label>
                        <input id="editRemark" class="easyui-textbox" style="width:250px;"
                               data-options="prompt:'輸入備註資訊...'" />
                    </div>
                </div>
                <div style="display: flex; gap: 20px; align-items: baseline; justify-content:space-between ">
                    <div style="display: flex; align-items: center; gap: 5px;">
                        <span id="versionUpdateInfo" style="color: #888; font-size: 12px;">
                            <i class="fa fa-clock-o"></i> 最後更新：載入中...
                        </span>
                    </div>
                    <div style="display: flex; align-items: baseline; gap: 5px;">
                        <label for="editIsActive" style="font-weight: bold; color: #333;">是否啟用:</label>
                        <input type="checkbox" id="editIsActive" onchange="onActiveStatusChange()" />
                    </div>
                </div>
            </div>

            <!-- 參數編輯表格 -->
            <div style="flex: 1; display: flex; flex-direction: column; min-height: 0;">
                <!-- 參數表格容器 - 重要：這裡設定固定高度和滾動 -->
                <div style="flex: 1; min-height: 0;">
                    <table id="paramGrid" class="easyui-datagrid"
                           style="width: 100%; height: 100%;"
                           data-options="
                             singleSelect:true,
                             fitColumns:true,
                             nowrap:false,
                             autoRowHeight:true,
                             onClickCell:onParamCellClick,
                             onEndEdit:onParamEndEdit,
                             onLoadSuccess:onParamGridLoadSuccess,
                             scrollbarSize:4
                           ">
                        <thead>
                            <tr>
                                <th data-options="field:'ParamName',title:'參數名稱',width:120">參數名稱</th>
                                <th data-options="field:'StdValue',title:'標準值',width:80,align:'center',editor:{type:'textbox'}">標準值</th>
                                <th data-options="field:'MaxValue',title:'上限值',width:80,align:'center',editor:{type:'textbox'}">上限值</th>
                                <th data-options="field:'MinValue',title:'下限值',width:80,align:'center',editor:{type:'textbox'}">下限值</th>
                                <th data-options="field:'BiasMethod',title:'偏差方式',width:90,align:'center',formatter:formatBiasMethod,editor:{type:'combobox',options:{valueField:'value',textField:'text',panelHeight:'auto'}}">偏差方式</th>
                                <th data-options="field:'BiasValue',title:'偏差值',width:70,align:'center',editor:{type:'numberbox',options:{precision:2}}">偏差值</th>
                                <th data-options="field:'AlarmFlag',title:'警報',width:50,align:'center',formatter:formatAlarmFlag,editor:{type:'checkbox',options:{on:'Y',off:'N'}}">警報</th>
                            </tr>
                        </thead>
                    </table>
                </div>
            </div>

            <!-- 操作按鈕區 -->
            <div style="justify-content:end; margin-top: 5px; display:flex; width:100%">
                <div href="javascript:void(0)" class="custom-easyui-button" onclick="saveRecipe('save')" id="saveBtn">
                    儲存修改
                </div>
                <div href="javascript:void(0)" class="custom-easyui-button secondary" onclick="saveRecipe('newVersion')" id="newVersionBtn">
                    另存新版本
                </div>
                <div href="javascript:void(0)" class="custom-easyui-button danger" onclick="deleteCurrentRecipe()" id="deleteBtn">
                    刪除此版本
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/Scripts/base/easyui/jquery.easyui.min.js"></script>
    <script>

        // 全域變數
        let currentRecipeId = 0;
        let allVersions = [];
        let currentVersionIndex = 0;
        let editingCell = null;
        let machineList = [];
        let currentDeviceId = '';
        let currentProdNo = '';
        let currentMoldNo = '';
        let isSaving = false; // 防止重複送出
        let showAllVersions = false; // 是否顯示所有版本
        const editableFields = ['StdValue', 'MaxValue', 'MinValue', 'BiasMethod', 'BiasValue'];

        // 偏差方式選項
        const biasMethodOptions = [
            { value: 'customize', text: '自定義' },
            { value: 'plusminus', text: '正負加減值' },
            { value: 'percent', text: '正負百分比' }
        ];

        $(function () {
            initializePage();

            // 添加 CSS 動畫
            if ($('head style[data-recipe-styles]').length === 0) {
                $('head').append(`
                    <style data-recipe-styles>
                        @@keyframes spin {
                            to { transform: rotate(360deg); }
                        }
                        .version-active {
                            background-color: #d4edda !important;
                            font-weight: bold;
                        }
                        .version-inactive {
                            background-color: #f8d7da !important;
                            color: #721c24;
                        }
                    </style>
                `);
            }
        });

        function initializePage() {
            loadMachineList();
            loadInitialRecipeList();
        }

        // 載入機台清單
        function loadMachineList() {
            $.get('@Url.Action("GetMachineList", "MachineManage")', function (res) {
                if (res.success) {
                    machineList = res.data;
                    $('#filterMachine').combobox('loadData', machineList);
                }
            });
        }

        // 載入初始Recipe清單（預設只顯示啟用版本）
        function loadInitialRecipeList() {
            $('#recipeGrid').datagrid('load', { showAllVersions: false });
        }

        // 顯示所有版本的切換事件
        function onShowAllVersionsChange() {
            showAllVersions = $('#showAllVersions').is(':checked');
            applyFilters();
        }

        // 機台選擇事件
        function onMachineSelect(record) {
            currentDeviceId = record.DeviceID;

            // 載入該機台的料號清單
            $.get('@Url.Action("GetProdNosByDevice", "RecipeManage")', { deviceId: currentDeviceId }, function (res) {
                if (res.success) {
                    const prodNos = res.data.map(p => ({ ProdNo: p }));
                    $('#filterProdNo').combobox('loadData', prodNos).combobox('enable').combobox('clear');
                    $('#filterMoldNo').combobox('clear').combobox('disable');
                }
            });
        }

        function onMachineChange(newVal, oldVal) {
            if (!newVal) {
                $('#filterProdNo').combobox('clear').combobox('disable');
                $('#filterMoldNo').combobox('clear').combobox('disable');
                currentDeviceId = '';
            }
        }

        // 料號選擇事件
        function onProdNoSelect(record) {
            currentProdNo = record.ProdNo;

            // 載入該機台+料號的模具清單
            $.get('@Url.Action("GetMoldNosByDeviceAndProd", "RecipeManage")', {
                deviceId: currentDeviceId,
                prodNo: currentProdNo
            }, function (res) {
                if (res.success && res.data.length > 0) {
                    const moldNos = res.data.map(m => ({ MoldNo: m }));
                    $('#filterMoldNo').combobox('loadData', moldNos)
                        .combobox('enable')
                        .combobox('clear');
                } else {
                    $('#filterMoldNo').combobox('loadData', [])
                        .combobox('disable');
                }
            });
        }

        function onProdNoChange(newVal, oldVal) {
            if (!newVal) {
                $('#filterMoldNo').combobox('clear').combobox('disable');
                currentProdNo = '';
            }
        }

        // 模具選擇事件
        function onMoldNoSelect(record) {
            currentMoldNo = record.MoldNo;
        }

        // 應用過濾器
        function applyFilters() {
            const filters = {
                deviceName: $('#filterMachine').combobox('getText'),
                prodNo: $('#filterProdNo').combobox('getValue'),
                moldNo: $('#filterMoldNo').combobox('getValue'),
                showAllVersions: showAllVersions
            };
            console.log({filters})
            $('#recipeGrid').datagrid('load', filters);
        }

        // 清除過濾器
        function clearFilters() {
            $('#filterMachine').combobox('clear');
            $('#filterProdNo').combobox('clear').combobox('disable');
            $('#filterMoldNo').combobox('clear').combobox('disable');
            $('#showAllVersions').prop('checked', false);
            showAllVersions = false;
            currentDeviceId = '';
            currentProdNo = '';
            currentMoldNo = '';
            $('#recipeGrid').datagrid('load', { showAllVersions: false });
        }

        // Recipe清單載入完成
        function onRecipeGridLoad(data) {
            customizePagination();
        }

        function customizePagination() {
            var pager = $('#recipeGrid').datagrid('getPager');
            if (pager.length) {
                pager.find('.pagination-num').closest('td').hide();
                pager.find('td:contains("Page")').hide();
                pager.find('td:contains("of")').hide();
                pager.find('.pagination-first').closest('td').hide();
                pager.find('.pagination-last').closest('td').hide();
                pager.find('.pagination-btn-separator').hide();
            }
        }

        // 選擇Recipe事件
        function onRecipeSelect(index, row) {
            loadRecipeVersions(row.DeviceId, row.ProdNo, row.MaterialNo || '', row.MoldNo || '', row.RecipeId);
        }

        // 載入Recipe版本資料
        function loadRecipeVersions(deviceId, prodNo, materialNo, moldNo, selectedRecipeId = null) {
            $.get('@Url.Action("GetDetailToEdit", "RecipeManage")', {
                deviceId: deviceId,
                prodNo: prodNo,
                materialNo: materialNo,
                moldNo: moldNo
            }, function (res) {
                console.log("loadRecipeVersions; GetDetailToEdit;", res)
                if (res.success && res.data.length > 0) {
                    allVersions = res.data;

                    // 如果有指定要選擇的RecipeId，找到對應的索引
                    let targetIndex = 0;
                    if (selectedRecipeId) {
                        const foundIndex = allVersions.findIndex(v => v.RecipeId === selectedRecipeId);
                        if (foundIndex >= 0) {
                            targetIndex = foundIndex;
                        }
                    }

                    currentVersionIndex = targetIndex;
                    currentRecipeId = allVersions[targetIndex].RecipeId;

                    showEditPanel();
                    setupVersionSelector();
                    loadVersionDetail(targetIndex);
                } else {
                    hideEditPanel();
                }
            });
        }

        // 設定版本選擇器
        function setupVersionSelector() {
            const versionOptions = allVersions.map(version => ({
                RecipeId: version.RecipeId,
                VersionDisplay: `v${version.Version} ${version.IsActive ? '(啟用)' : '(停用)'}`
            }));

            $('#versionSelect').combobox({
                data: versionOptions,
                valueField: 'RecipeId',
                textField: 'VersionDisplay',
                editable: false,
                panelHeight: 'auto',
                onSelect: onVersionSelect
            });

            // 設定當前選中的版本
            $('#versionSelect').combobox('select', currentRecipeId);
        }

        // 版本選擇事件
        function onVersionSelect(record) {
            const selectedIndex = allVersions.findIndex(v => v.RecipeId === record.RecipeId);
            if (selectedIndex >= 0 && selectedIndex !== currentVersionIndex) {
                currentVersionIndex = selectedIndex;
                currentRecipeId = record.RecipeId;
                loadVersionDetail(selectedIndex);
            }
        }

        // 顯示編輯面板
        function showEditPanel() {
            $('#emptyState').hide();
            $('#editPanel').css('display', 'flex');
        }

        // 隱藏編輯面板
        function hideEditPanel() {
            $('#editPanel').hide();
            $('#emptyState').show();
        }

        // 載入版本詳細資料
        function loadVersionDetail(index) {
            const version = allVersions[index];
            console.log('載入版本詳細資料:', version);

            const machine = machineList.find(m => m.DeviceID === version.DeviceId);
            $('#displayDeviceName').text(machine ? machine.DeviceName : version.DeviceId);
            $('#displayProdNo').text(version.ProdNo || '-');
            $('#displayMoldNo').text(version.MoldNo || '-');
            $('#editRemark').textbox('setValue', version.Remark || '');
            $('#editIsActive').prop('checked', !!version.IsActive);
            console.log('設定 IsActive 狀態:', version.IsActive);

            // 更新者資訊
            const updateBy = version.UpdateBy || version.CreateBy || '-';
            const updateDate = formatDateTime(version.UpdateDate || version.CreateDate);
            $('#versionUpdateInfo').html(`<i class="fa fa-clock-o"></i> 最後更新：${updateBy} ${updateDate}`);

            // 載入參數資料，並標記哪些是新參數
            const paramData = (version.Params || []).map(p => ({
                ParamId: p.ParamId,
                ParamName: p.ParamName,
                StdValue: p.StdValue || '',
                MaxValue: p.MaxValue || '',
                MinValue: p.MinValue || '',
                BiasMethod: p.BiasMethod || 'percent',
                BiasValue: p.BiasValue || '10',
                AlarmFlag: p.AlarmFlag || 'Y',
                _isNewParam: !p.StdValue || p.StdValue.trim() === ''
            }));

            $('#paramGrid').datagrid('loadData', paramData);

            setTimeout(() => {
                $('#paramGrid').datagrid('resize');
                highlightNewParams();
                addAlarmFlagClickHandlers();
            }, 200);
        }

        // 啟用狀態變更事件
        function onActiveStatusChange() {
            const isActive = $('#editIsActive').is(':checked');
            const currentVersion = allVersions[currentVersionIndex];

            if (isActive && !currentVersion.IsActive) {
                $.messager.confirm('確認',
                    '啟用此版本將會自動停用同一組合的其他版本，確定要繼續嗎？',
                    function(r) {
                        if (!r) {
                            // 用戶取消，恢復原始狀態
                            $('#editIsActive').prop('checked', currentVersion.IsActive);
                        }
                    }
                );
            }
        }

        function addAlarmFlagClickHandlers() {
            // 移除舊的事件處理器，避免重複綁定
            $('#paramGrid .datagrid-body').off('click.alarmToggle');

            // 使用事件委派，直接綁定到 datagrid-body 上
            $('#paramGrid .datagrid-body').on('click.alarmToggle', 'td[field="AlarmFlag"]', function (e) {
                e.preventDefault();
                e.stopPropagation();

                const $row = $(this).closest('tr');
                const rowIndex = parseInt($row.attr('datagrid-row-index'));

                if (!isNaN(rowIndex)) {
                    toggleAlarmFlag(rowIndex);
                }
            });
        }

        // 切換警報旗標
        function toggleAlarmFlag(rowIndex) {
            console.log('切換警報旗標，行索引:', rowIndex);

            const rows = $('#paramGrid').datagrid('getRows');
            if (rows[rowIndex]) {
                const currentValue = rows[rowIndex].AlarmFlag;
                const newValue = currentValue === 'Y' ? 'N' : 'Y';

                console.log(`切換警報狀態：${currentValue} -> ${newValue}`);

                // 更新資料
                $('#paramGrid').datagrid('updateRow', {
                    index: rowIndex,
                    row: { AlarmFlag: newValue }
                });

                // 給用戶一個視覺反饋
                const $cell = $(`#paramGrid .datagrid-body tr[datagrid-row-index="${rowIndex}"] td[field="AlarmFlag"]`);
                $cell.css('background-color', '#d4edda');
                setTimeout(() => {
                    $cell.css('background-color', '');
                    // 重新綁定事件處理器
                    addAlarmFlagClickHandlers();
                }, 300);
            }
        }

        // 高亮顯示新參數
        function highlightNewParams() {
            const rows = $('#paramGrid').datagrid('getRows');
            rows.forEach((row, index) => {
                if (row._isNewParam) {
                    $('#paramGrid').datagrid('getPanel').find(`tr[datagrid-row-index="${index}"]`)
                        .css('background-color', '#fff3cd')
                        .attr('title', '此參數尚未設定數值，可以填入後儲存');
                }
            });
        }

        // 控制按鈕狀態
        function setButtonsEnabled(enabled) {
            const buttons = ['#saveBtn', '#newVersionBtn', '#deleteBtn'];
            buttons.forEach(btnId => {
                const $btn = $(btnId);
                if (enabled) {
                    $btn.css({
                        'background': '',
                        'color': '',
                        'border-color': '',
                        'cursor': '',
                        'opacity': '',
                        'pointer-events': ''
                    }).removeAttr('disabled');
                } else {
                    $btn.css({
                        'background': '#f0f0f0',
                        'color': '#999',
                        'border-color': '#ddd',
                        'cursor': 'not-allowed',
                        'opacity': '0.6',
                        'pointer-events': 'none'
                    }).attr('disabled', 'disabled');
                }
            });
        }

        // 顯示/隱藏載入遮罩
        function showSaveOverlay() {
            if ($('#saveOverlay').length === 0) {
                $('body').append(`
                    <div id="saveOverlay" style="
                        display: none;
                        position: fixed;
                        top: 0;
                        left: 0;
                        width: 100%;
                        height: 100%;
                        background-color: rgba(0, 0, 0, 0.5);
                        z-index: 9999;
                        justify-content: center;
                        align-items: center;
                        font-size: 18px;
                        color: white;
                    ">
                        <div>
                            <div style="
                                display: inline-block;
                                width: 20px;
                                height: 20px;
                                border: 3px solid rgba(255,255,255,.3);
                                border-radius: 50%;
                                border-top-color: #fff;
                                animation: spin 1s ease-in-out infinite;
                            "></div>
                            <span style="margin-left: 10px;">儲存中，請稍候...</span>
                        </div>
                    </div>
                `);
            }
            $('#saveOverlay').css('display', 'flex');
        }

        function hideSaveOverlay() {
            $('#saveOverlay').hide();
        }

        // 參數表格單元格點擊 - 修正版本
        function onParamCellClick(index, field) {
            // 如果是 AlarmFlag 欄位，直接處理切換，不進入編輯模式
            if (field === 'AlarmFlag') {
                toggleAlarmFlag(index);
                return;
            }

            endCurrentEdit();

            if (editableFields.includes(field)) {
                startEdit(index, field);
            }
        }

        function startEdit(index, field) {
            $('#paramGrid').datagrid('beginEdit', index);

            // 設定偏差方式的選項
            if (field === 'BiasMethod') {
                const editor = $('#paramGrid').datagrid('getEditor', { index: index, field: field });
                if (editor) {
                    $(editor.target).combobox('loadData', biasMethodOptions);
                }
            }

            editingCell = { index: index, field: field };

            // 延遲設定 focus 和鍵盤事件
            setTimeout(() => {
                const editor = $('#paramGrid').datagrid('getEditor', { index: index, field: field });
                if (editor) {
                    let $input;

                    if (field === 'BiasMethod') {
                        $input = $(editor.target).combobox('textbox');
                    } else {
                        $input = $(editor.target).textbox('textbox');
                    }

                    // 設定 focus 和選中文字
                    $input.focus().select();

                    // 綁定鍵盤事件
                    bindKeyboardEvents($input, index, field);
                }
            }, 50);
        }

        // 綁定鍵盤事件
        function bindKeyboardEvents($input, rowIndex, field) {
            // 移除舊的事件綁定，避免重複
            $input.off('keydown.navigation');

            $input.on('keydown.navigation', function (e) {
                switch (e.which) {
                    case 13: // Enter 鍵
                        e.preventDefault();
                        e.stopPropagation();
                        completeEdit();
                        break;

                    case 9: // Tab 鍵
                        e.preventDefault();
                        e.stopPropagation();
                        navigateToNextCell(rowIndex, field, !e.shiftKey);
                        break;

                    case 27: // Escape 鍵
                        e.preventDefault();
                        e.stopPropagation();
                        cancelEdit();
                        break;
                }
            });
        }

        function completeEdit() {
            if (editingCell) {
                const { index, field } = editingCell;
                $('#paramGrid').datagrid('endEdit', index);
                editingCell = null;

                // 給一個短暫的延遲，讓編輯狀態完全結束
                setTimeout(() => {
                    console.log('編輯完成');
                }, 50);
            }
        }

        function cancelEdit() {
            if (editingCell) {
                const { index } = editingCell;
                $('#paramGrid').datagrid('cancelEdit', index);
                editingCell = null;
                console.log('編輯已取消');
            }
        }

        function navigateToNextCell(currentRow, currentField, forward = true) {
            const rows = $('#paramGrid').datagrid('getRows');
            const totalRows = rows.length;

            if (totalRows === 0) return;

            // 先完成當前編輯
            completeEdit();

            // 延遲一點再開始下一個編輯，確保當前編輯完全結束
            setTimeout(() => {
                const currentFieldIndex = editableFields.indexOf(currentField);
                let nextRow = currentRow;
                let nextField = currentField;

                if (forward) {
                    // Tab 鍵：向前導航
                    if (currentFieldIndex < editableFields.length - 1) {
                        // 還有下一個欄位
                        nextField = editableFields[currentFieldIndex + 1];
                    } else {
                        // 已經是最後一個欄位，跳到下一行的第一個欄位
                        nextRow = currentRow + 1;
                        nextField = editableFields[0];

                        // 如果已經是最後一行，跳到第一行
                        if (nextRow >= totalRows) {
                            nextRow = 0;
                        }
                    }
                } else {
                    // Shift+Tab：向後導航
                    if (currentFieldIndex > 0) {
                        // 還有上一個欄位
                        nextField = editableFields[currentFieldIndex - 1];
                    } else {
                        // 已經是第一個欄位，跳到上一行的最後一個欄位
                        nextRow = currentRow - 1;
                        nextField = editableFields[editableFields.length - 1];

                        // 如果已經是第一行，跳到最後一行
                        if (nextRow < 0) {
                            nextRow = totalRows - 1;
                        }
                    }
                }

                console.log(`導航：從 (${currentRow}, ${currentField}) 到 (${nextRow}, ${nextField})`);

                // 開始編輯下一個單元格
                startEdit(nextRow, nextField);

                // 滾動到對應的行（如果需要）
                $('#paramGrid').datagrid('scrollTo', nextRow);

            }, 100);
        }

        // 參數編輯結束
        function onParamEndEdit(index, row, changes) {
            console.log('參數編輯結束，行索引:', index, '變更:', changes);

            if ('BiasValue' in changes || 'BiasMethod' in changes || 'StdValue' in changes) {
                calculateBiasValues(index, row);
            }

            // 清除 editingCell 狀態
            editingCell = null;
        }

        // 結束當前編輯
        function endCurrentEdit() {
            if (editingCell) {
                const { index } = editingCell;
                $('#paramGrid').datagrid('endEdit', index);
                editingCell = null;
            }
        }

        // 計算偏差值
        function calculateBiasValues(index, row) {
            const std = parseFloat(row.StdValue) || 0;
            const bias = parseFloat(row.BiasValue) || 0;
            let max = std, min = std;

            if (row.BiasMethod === 'plusminus') {
                max = std + bias;
                min = std - bias;
            } else if (row.BiasMethod === 'percent') {
                max = std * (1 + bias / 100);
                min = std * (1 - bias / 100);
            }

            if (row.BiasMethod !== 'customize') {
                $('#paramGrid').datagrid('updateRow', {
                    index: index,
                    row: {
                        MaxValue: max.toFixed(2),
                        MinValue: min.toFixed(2)
                    }
                });
            }
        }

        // 新增Recipe
        function createNewRecipe() {
            const deviceId = $('#filterMachine').combobox('getValue');
            const prodNo = $('#filterProdNo').combobox('getValue');

            if (!deviceId) {
                $.messager.alert('提示', '請先選擇機台');
                return;
            }

            if (!prodNo) {
                $.messager.alert('提示', '請先輸入或選擇料號');
                return;
            }

            const moldNo = $('#filterMoldNo').combobox('getValue') || '';

            $.messager.confirm('確認',
                `確定要為以下組合建立新參數配置嗎？<br/>
                機台：${$('#filterMachine').combobox('getText')}<br/>
                料號：${prodNo}<br/>
                模具：${moldNo || '(無)'}`,
                function (r) {
                    if (r) {
                        loadRecipeVersions(deviceId, prodNo, '', moldNo)
                    }
                }
            );
        }

        // 儲存Recipe - 統一版本（修正重複函數問題）
        function saveRecipe(mode) {
            // 防止重複提交
            if (isSaving) {
                return;
            }

            endCurrentEdit();

            const allParamRows = $('#paramGrid').datagrid('getRows');

            // 只儲存有填入 StdValue 的參數
            const paramRows = allParamRows.filter(row =>
                row.StdValue && row.StdValue.toString().trim() !== ''
            );

            console.log(paramRows.length, "paramRows.length");
            if (paramRows.length === 0) {
                $.messager.alert('提示', '請至少填入一個參數的標準值');
                return;
            }

            // 設置儲存狀態
            isSaving = true;
            setButtonsEnabled(false);
            showSaveOverlay();

            const currentVersion = allVersions[currentVersionIndex];
            const isActive = $('#editIsActive').is(':checked');

            const dto = {
                Mode: mode,
                RecipeId: currentRecipeId,
                ProdNo: currentVersion.ProdNo,
                MaterialNo: currentVersion.MaterialNo,
                MoldNo: currentVersion.MoldNo,
                DeviceId: currentVersion.DeviceId,
                Remark: $('#editRemark').textbox('getValue'),
                IsActive: isActive,
                RecipeDetails: paramRows
            };

            console.log('儲存的 DTO:', dto);

            $.ajax({
                url: '@Url.Action("SaveRecipe", "RecipeManage")',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(dto),
                success: function (res) {
                    if (res.success) {
                        const alarmEnabledCount = paramRows.filter(p => p.AlarmFlag === 'Y').length;
                        const alarmDisabledCount = paramRows.filter(p => p.AlarmFlag === 'N').length;
                        const isActiveText = isActive ? '已啟用' : '已停用';

                        let message = `儲存完成！已儲存 ${paramRows.length} 個參數，版本狀態：${isActiveText}`;
                        if (alarmDisabledCount > 0) {
                            message += `<br/>參數警報：${alarmEnabledCount} 個啟用，${alarmDisabledCount} 個停用`;
                        }

                        $.messager.show({
                            title: '成功',
                            msg: message,
                            timeout: 3000,
                            showType: 'slide'
                        });

                        // 重新載入版本和清單
                        loadRecipeVersions(currentVersion.DeviceId, currentVersion.ProdNo,
                            currentVersion.MaterialNo, currentVersion.MoldNo, currentRecipeId);
                        applyFilters();
                    } else {
                        $.messager.alert('錯誤', res.message || '儲存失敗');
                    }
                },
                error: function () {
                    $.messager.alert('錯誤', '儲存時發生錯誤');
                },
                complete: function () {
                    // 無論成功或失敗都要恢復狀態
                    hideSaveOverlay();
                    isSaving = false;
                    setButtonsEnabled(true);
                }
            });
        }

        // 參數表格載入完成後的回調 - 函數名稱要對應 HTML 中的 onLoadSuccess
        function onParamGridLoadSuccess(data) {
            console.log('參數表格載入完成');
            // 延遲執行，確保 DOM 完全渲染
            setTimeout(() => {
                addAlarmFlagClickHandlers();
                highlightNewParams();
            }, 100);
        }

        // 刪除當前Recipe
        function deleteCurrentRecipe() {
            if (currentRecipeId <= 0) return;

            const currentVersion = allVersions[currentVersionIndex];
            const versionText = `v${currentVersion.Version} ${currentVersion.IsActive ? '(啟用)' : '(停用)'}`;

            $.messager.confirm('確認',
                `確定要刪除版本 ${versionText} 嗎？此操作無法復原！`,
                function (r) {
                if (r) {
                    // 防止重複提交
                    if (isSaving) {
                        return;
                    }

                    isSaving = true;
                    setButtonsEnabled(false);
                    showSaveOverlay();

                    $.ajax({
                        url: '@Url.Action("DeleteRecipe", "RecipeManage")',
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({ recipeId: currentRecipeId }),
                        success: function (res) {
                            if (res.success) {
                                $.messager.show({
                                    title: '成功',
                                    msg: '版本已刪除',
                                    timeout: 2000,
                                    showType: 'slide'
                                });
                                hideEditPanel();
                                applyFilters();
                            } else {
                                $.messager.alert('錯誤', res.message || '刪除失敗');
                            }
                        },
                        error: function () {
                            $.messager.alert('錯誤', '刪除時發生錯誤');
                        },
                        complete: function () {
                            hideSaveOverlay();
                            isSaving = false;
                            setButtonsEnabled(true);
                        }
                    });
                }
            });
        }

        // 格式化函數
        function formatActive(value, row, index) {
            if (value) {
                return '<i class="fa fa-check-circle" style="color:green;" title="此版本已啟用"></i>';
            } else {
                return '<i class="fa fa-circle-o" style="color:gray;" title="此版本已停用"></i>';
            }
        }

        function formatDate(value) {
            if (!value) return '';
            const matches = /\/Date\((\d+)\)\//.exec(value);
            if (!matches) return '';
            const date = new Date(parseInt(matches[1]));
            return date.toLocaleDateString();
        }

        function formatDateTime(value) {
            if (!value) return '-';
            const matches = /\/Date\((\d+)\)\//.exec(value);
            if (!matches) return value;
            const date = new Date(parseInt(matches[1]));
            return date.toLocaleString();
        }

        function formatBiasMethod(value) {
            const option = biasMethodOptions.find(o => o.value === value);
            return option ? option.text : value;
        }

        function formatAlarmFlag(value) {
            return value === 'Y' ? '<i class="fa fa-check" style="color:green;"></i>' : '<i class="fa fa-times" style="color:red;"></i>';
        }

        // 在參數名稱的格式化函數中加入提示
        function formatParamName(value, row, index) {
            if (row._isNewParam) {
                return `<span style="color: #856404;">${value} <i class="fa fa-plus-circle" title="新增參數"></i></span>`;
            }
            return value;
        }
    </script>
}